#include <iostream>
using namespace std;

class List
{
private:
	struct Elem{
		int data;
		int prior;
		Elem* next;
		Elem* prev;
	};
	Elem* head;
	Elem* tail;
	int count;
	int CheckPrior(Elem& check)
	{
		Elem* current = head;
		int ind = 0;
		if (head == nullptr) return ind;
		while (current != nullptr)
		{
			if (current->prior > check.prior)
			{
				ind++;
				current = current->next;
			}
			else return ind;
		}
		return ind;
	}
	void AddHead(int data, int prior)
	{
		Elem* temp = new Elem;
		temp->data = data;
		if (head == nullptr)
		{
			head = tail = temp;
			head->next = nullptr;
			head->prev = nullptr;
		}
		else
		{
			temp->next = head;
			head->prev = temp;
			head = temp;
			temp->prev = nullptr;
		}
		//count++;
	}
	void AddTail(int data, int prior)
	{
		Elem* temp = new Elem;
		if (head == nullptr)
		{
			head = temp;
			tail = temp;
			head->data = data;
			head->next = nullptr;
			head->prev = nullptr;
			return;
		}
		temp->data = data;
		temp->prior = prior;
		temp->next = nullptr;
		temp->prev = tail;
		tail->next = temp;
		tail = temp;
		//count++;
	}
public:
	List(){
		head = tail = nullptr;
		count = 0;
	}
	void AddElem(int data, int prior)
	{
		Elem* temp = new Elem;
		temp->data = data;
		temp->prior = prior;
		int ind = CheckPrior(*temp);
		if (head == nullptr)
		{
			head = tail = temp;
			head->next = nullptr;
			head->prev = nullptr;
		}
		else if (ind == 0)
		{
			temp->next = head;
			head->prev = temp;
			head = temp;
			temp->prev = nullptr;
		}
		else if (count == ind)
		{
			temp->next = nullptr;
			temp->prev = tail;
			tail->next = temp;
			tail = temp;
		}
		else if (count == 1)
		{
			if (head->prior < prior)
				AddHead(data, prior);
			else AddTail(data, prior);
		}
		else
		{
			Elem* get_elem = GetElemAtIndex(ind);
			if (get_elem == nullptr)
			{
				cout << "error";
				return;
			}
			temp->prev = get_elem->prev;
			temp->next = get_elem;
			(temp->prev)->next = temp;
			(temp->next)->prev = temp;
		}
		count++;
	}
	void AddTail(int data)
	{
		Elem* temp = new Elem;
		if (head == nullptr)
		{
			head = temp;
			tail = temp;
			head->data = data;
			head->next = nullptr;
			head->prev = nullptr;
			return;
		}
		temp->data = data;
		temp->next = nullptr;
		temp->prev = tail;
		tail->next = temp;
		tail = temp;
		count++;
	}
	int GetCount() const
	{
		return count;
	}
	int GetHead() const
	{
		return head->data;
	}

	int GetTail() const
	{
		return tail->data;
	}

	bool RemoveHead()
	{
		if (head != nullptr && count > 1)
		{
			Elem* temp = head;
			head = head->next;
			head->prev = nullptr;
			delete temp;
			count--;
		}
		else if (count == 1)
		{
			delete head;
			head = nullptr;
			tail = nullptr;
			count--;
		}
		else return false;
		return true;
	}

	bool RemoveTail()
	{
		if (head != nullptr && count > 1)
		{
			Elem* temp = tail;
			tail = tail->prev;
			tail->next = nullptr;
			delete temp;
			count--;
		}
		else if (count == 1)
		{
			delete tail;
			head = nullptr;
			tail = nullptr;
			count--;
		}
		else return false;
		return true;
	}
	Elem* GetElemAtIndex(int index)
	{
		if (head == nullptr) return nullptr;
		else
		{
			Elem* current = head;
			for (int i = 0; i < index; i++)
			{
				current = current->next;
			}
			return current;
		}
	}
	bool RemoveAtIndex(int index)
	{
		Elem* current = head;
		if (index == 0)
			return RemoveHead();
		else if (index == count)
			return RemoveTail();
		else if (index > count) return false;
		else
		{
			Elem* temp = GetElemAtIndex(index);
			(temp->next)->prev = temp->prev;
			(temp->prev)->next = temp->next;
			delete temp;
		}
	}
	void Clear()
	{

		while (RemoveHead()){};
	}
	bool IsEmpty()
	{
		if (head == nullptr)
			return true;
		return false;
	}
	int SearchAsIndex(int index)
	{
		Elem* current = head;
		for (int i = 0;; i++)
		{
			if (i == index)
				return current->data;
			current = current->next;
		}
	}

	void Print()
	{
		Elem* current = head;
		while (current != nullptr)
		{
			cout << current->data << " ";
			current = current->next;
		}
	}
	void PrintRevers()
	{
		Elem* current = tail;
		while (current != nullptr)
		{
			cout << current->data << " ";
			current = current->prev;
		}
	}
};

class Queue
{
	List ls;
public:
	void Push(int value, int prior)
	{
		ls.AddElem(value, prior);
	}
	int Pop()
	{
		int temp = ls.GetElemAtIndex(ls.GetCount() - 1)->data;
		ls.RemoveTail();
		return temp;
	}
	void Print()
	{
		ls.Print();
		
	}
	int GetCount()
	{
		return ls.GetCount();
	}
};

int main(void)
{
	Queue q;
	q.Push(100, 100);
	q.Push(50, 50);
	q.Push(90, 90);
	q.Push(120, 120);
	q.Push(10, 10);
	q.Print();
	cout << endl;
	//cout << q.GetCount();
	cout << endl;
	q.Pop();
	q.Print();
	//cout << endl << q.GetCount();
	cout << endl;
}
