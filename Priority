#include <iostream>
using namespace std;

#include <iostream>
using namespace std;

class List
{
private:
	struct Elem{
		int data;
		Elem* next;
		Elem* prev;
	};
	Elem* head;
	Elem* tail;
	int count;
public:
	List(){
		head = tail = nullptr;
		count = 0;
	}
	void AddElem(int data)
	{
		Elem* temp = new Elem;
		temp->data = data;
		if (head == nullptr)
		{
			head = tail = temp;
			head->next = nullptr;
			head->prev = nullptr;
		}
		else
		{
			temp->next = head;
			head->prev = temp;
			head = temp;
			temp->prev = nullptr;
		}
		count++;
	}
	void AddTail(int data)
	{
		Elem* temp = new Elem;
		if (head == nullptr)
		{
			head = temp;
			tail = temp;
			head->data = data;
			head->next = nullptr;
			head->prev = nullptr;
			return;
		}
		temp->data = data;
		temp->next = nullptr;
		temp->prev = tail;
		tail->next = temp;
		tail = temp;
		count++;
	}
	int GetCount() const
	{
		return count;
	}
	int GetHead() const
	{
		return head->data;
	}

	int GetTail() const
	{
		return tail->data;
	}

	bool RemoveHead()
	{
		if (head != nullptr && count > 1)
		{
			Elem* temp = head;
			head = head->next;
			head->prev = nullptr;
			delete temp;
			count--;
		}
		else if (count == 1)
		{
			delete head;
			head = nullptr;
			tail = nullptr;
			count--;
		}
		else return false;
		return true;
	}

	bool RemoveTail()
	{
		if (head != nullptr && count > 1)
		{
			Elem* temp = tail;
			tail = tail->prev;
			tail->next = nullptr;
			delete temp;
			count--;
		}
		else if (count == 1)
		{
			delete tail;
			head = nullptr;
			tail = nullptr;
			count--;
		}
		else return false;
		return true;
	}
	Elem* GetElemAtIndex(unsigned index)
	{
		if (head == nullptr) return nullptr;
		else
		{
			Elem* current = head;
			for (int i = 0; i < index; i++)
			{
				current = current->next;
			}
			return current;
		}
	}
	void Insert(int data, unsigned index)
	{
		if (index > count) return;
		if (index == 0)
		{
			AddElem(data);
		}
		else if (index == count)
		{
			AddTail(data);
		}
		else
		{
			Elem* temp = new Elem;
			temp->data = data;
			Elem* change = GetElemAtIndex(index);
			if ((change->prev)->next != nullptr)
				(change->prev)->next = temp;
			temp->prev = change->prev;
			change->prev = temp;
			temp->next = change;
			count++;
		}
	}
	bool RemoveAtIndex(int index)
	{
		Elem* current = head;
		if (index == 0)
			return RemoveHead();
		else if (index == count)
			return RemoveTail();
		else if (index > count) return false;
		else
		{
			Elem* temp = GetElemAtIndex(index);
			(temp->next)->prev = temp->prev;
			(temp->prev)->next = temp->next;
			delete temp;
		}
	}
	void Clear()
	{

		while (RemoveHead()){};
	}
	bool IsEmpty()
	{
		if (head == nullptr)
			return true;
		return false;
	}
	int SearchAsIndex(int index)
	{
		Elem* current = head;
		for (int i = 0;; i++)
		{
			if (i == index)
				return current->data;
			current = current->next;
		}
	}
	void Print()
	{
		Elem* current = head;
		while (current != nullptr)
		{
			cout << current->data << " ";
			current = current->next;
		}
	}
	void PrintRevers()
	{
		Elem* current = tail;
		while (current != nullptr)
		{
			cout << current->data << " ";
			current = current->prev;
		}
	}
};

class Queue
{
	List ls;
	List pr;
public:
	void Push(int value, int prior)
	{
		bool key = true;
		if (pr.IsEmpty())
		{
			key = false;
			ls.AddElem(value);
			pr.AddElem(prior);
		}
		else
		for (int i = 0; i < ls.GetCount(); i++)
		{
			int prior2 = pr.GetElemAtIndex(i)->data;
			if (prior >= prior2)
			{
				if (i == 0)
				{
					ls.AddElem(value);
					pr.AddElem(prior);
					return;
				}
				else if (i == ls.GetCount())
				{
					ls.AddTail(value);
					pr.AddTail(prior);
					return;
				}
				else
				{
					ls.Insert(value, i);
					pr.Insert(prior, i);
					return;
				}
			}
		}
		if (key)
		{
			ls.AddTail(value);
			pr.AddTail(prior);
		}
		
	}
	int Pop()
	{
		int temp = ls.GetElemAtIndex(0)->data;
		ls.RemoveHead();
		pr.RemoveHead();
		return temp;
	}
	void Print()
	{
		ls.Print();

	}
	int GetCount()
	{
		return ls.GetCount();
	}
};

int main(void)
{
	/*List l;
	l.AddElem(10);
	l.AddElem(20);
	l.AddElem(21);
	l.AddElem(22);
	l.AddTail(12);
	l.RemoveHead();
	cout << l.SearchAsIndex(1) << endl;
	l.Print();
	cout << endl;
	l.PrintRevers();
	cout << endl;
	l.Clear();
	l.Print();
	l.AddTail(0);
	l.AddTail(1);
	l.AddTail(2);
	l.AddTail(3);
	l.Print();
	cout << endl;
	cout << l.GetCount();
	cout << endl;
	cout << l.GetElemAtIndex(2)->data;
	l.RemoveAtIndex(2);
	cout << endl;
	l.Print();*/
	Queue q;
	q.Push(80, 80);
	q.Push(50, 50);
	q.Push(100, 100);
	q.Push(150, 150);
	q.Push(100, 100);
	//q.Print();
	cout << q.Pop() << endl;
	cout << q.Pop() << endl;
	cout << q.Pop() << endl;
	cout << q.Pop() << endl;
	cout << q.Pop() << endl;
	q.Print();
	//cout << q.Pop() << endl;
	//cout << q.Pop() << endl;
}
