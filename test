#include <iostream>
using namespace std;

class FIO
{
	char *m_ps_name;
	char *m_ps_surname;
	char *m_ps_lastname;

public:

	FIO();
	FIO(char * = "Unknown", char * = "Unknown", char * = "Unknown");
   ~FIO();

   const char *GetName()const;
   const char *GetSurName()const;
   const char *GetLastName()const;

   void SetName(char *);
   void SetSurName(char *);
   void SetLastName(char *);
};

FIO::FIO()
{
	cout << "Создаем пустое ФИО\n";
	char un[] = "Unknown";
	unsigned int len_un = strlen(un) + 1;

	m_ps_name = new char[len_un];
	strcpy_s(m_ps_name, len_un, un);

	m_ps_lastname = new char[len_un];
	strcpy_s(m_ps_lastname, len_un, un);

	m_ps_surname = new char[len_un];
	strcpy_s(m_ps_surname, len_un, un);
}
FIO::FIO(char *name, char *surname, char *lastname)
{
	cout << "Создаем ФИО\n";
	unsigned int len_name;
	
	len_name = strlen(name) + 1;
	m_ps_name = new char[len_name];
	strcpy_s(m_ps_name, len_name, name);

	len_name = strlen(lastname) + 1;
	m_ps_lastname = new char[len_name];
	strcpy_s(m_ps_lastname, len_name, lastname);

	len_name = strlen(surname) + 1;
	m_ps_surname = new char[len_name];
	strcpy_s(m_ps_surname, len_name, surname);
}
FIO::~FIO()
{
	cout << "Удаляем имя\n";
	delete[]m_ps_name;
	delete[]m_ps_surname;
	delete[]m_ps_lastname;
}
void FIO::SetName(char * name)
{
	cout << "Меняем имя\n";
	int lenth = strlen(name) + 1;
	delete[]m_ps_name;
	m_ps_name = new char[lenth];
	strcpy_s(m_ps_name, lenth, name);
}
void FIO::SetSurName(char * surname)
{
	cout << "Меняем фамилию\n";
	int lenth = strlen(surname) + 1;
	delete[]m_ps_surname;
	m_ps_surname = new char[lenth];
	strcpy_s(m_ps_surname, lenth, surname);
}
void FIO::SetLastName(char * lastname)
{
	cout << "Меняем отчество\n";
	int lenth = strlen(lastname) + 1;
	delete[]m_ps_lastname;
	m_ps_lastname = new char[lenth];
	strcpy_s(m_ps_lastname, lenth, lastname);
}
const char * FIO::GetName()const{ return m_ps_name; }
const char * FIO::GetSurName()const{ return m_ps_surname; }
const char * FIO::GetLastName()const{ return m_ps_lastname; }

class DATE{
	unsigned int m_uDay;
	unsigned int m_uMonth;
	unsigned int m_uYear;

	DATE();
	DATE(unsigned, unsigned, unsigned);

	void SetDay(unsigned int day) { m_uDay = day; }
	void SetMonth(unsigned int month) { m_uMonth = month; }
	void SetYear(unsigned int year) { m_uYear = year; }

	int GetDay(){ return m_uDay; }
	int GetMonth(){ return m_uMonth; }
	int GetYear(){ return m_uYear; }
};

DATE::DATE(){ m_uDay = m_uMonth = m_uYear = 0; }
DATE::DATE(unsigned day, unsigned month, unsigned year)
{
	m_uDay = day;
	m_uMonth = month;
	m_uYear = year;
}

class MARK
{
	unsigned * m_pu_mark;
	unsigned size;
public:
	MARK(){
		size = 1;
		m_pu_mark = new unsigned[size]; 
		m_pu_mark[0] = 0;
	}
	//n - цифра показывающая сколько оценок мы заполняем
	MARK(unsigned size, unsigned n, unsigned mark, ...) 
	{
		this->size = size;
		m_pu_mark = new unsigned[this->size];
		unsigned *p_mark = &mark;

		for (unsigned int i = 0; i < n; i++)
		{
			m_pu_mark[i] = *(p_mark + i);
		}
		//остаток заполняем 0, что значит "оценки нет"
		for (unsigned int i = n; i < size; i++)
		{
			m_pu_mark[i] = 0;
		}
	}
	unsigned GetMark(unsigned)const;
	void SetMark(unsigned uMark, unsigned uPosition)
	{
		m_pu_mark[uPosition] = uMark;
	}
	~MARK(){ delete [] m_pu_mark; }
};
unsigned MARK::GetMark(unsigned position)const
{
	return m_pu_mark[position];
}

class Student
{
	DATE m_date;
	FIO m_fio;
	char * m_psHome;
	char * m_psPhone;
	MARK m_mark_zachet;
	MARK m_mark_kurs;
	MARK m_mark_exam;
};

int main(void)
{

}
