#include <iostream>
using namespace std;

class FIO{
	char* name;
	char* s_name;
	char* l_name;
public:
	FIO(char* n, char* s, char* l);
	//FIO();
	FIO(const FIO& oth);

	const char* GetName()const{ return name; }
	const char* GetS_name()const{ return s_name; }
	const char* GetL_name()const{ return l_name; }

	void SetName(const char* n);
	void SetSurname(const char* s);
	void SetLastname(const char* l);

	~FIO();
};
FIO::FIO(char* n = "Unknown", char* s = "Unknown", char* l = "Unknown")
{
	cout << "Запускаем конструктор\n";
	int capacity = strlen(n) + 1;
	name = new char[capacity];
	strcpy_s(name, capacity, n);

	capacity = strlen(s) + 1;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, s);

	capacity = strlen(l) + 1;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, l);
	cout << "Закрываем конструктор\n";
}
//FIO::FIO() : FIO("Unknown", "Unknown", "Unknown"){};
FIO::FIO(const FIO& oth)
{
	cout << "Запускаем конструктор копирования\n";
	int capacity = strlen(oth.name) + 1;
	name = new char[capacity];
	strcpy_s(name, capacity, oth.name);

	capacity = strlen(oth.s_name) + 1;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, oth.s_name);

	capacity = strlen(oth.l_name) + 1;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, oth.l_name);
	cout << "Закрываем конструктор копирования\n";
}
void FIO::SetName(const char* n)
{
	int capacity = strlen(n) + 1;
	delete[]name;
	name = new char[capacity];
	strcpy_s(name, capacity, n);
}
void FIO::SetSurname(const char* s)
{
	int capacity = strlen(s) + 1;
	delete[]s_name;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, s);
}
void FIO::SetLastname(const char* l)
{
	int capacity = strlen(l) + 1;
	delete[]s_name;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, l);
}

FIO::~FIO()
{
	cout << "Запускаем деструктор\n";
	delete[]name;
	delete[]s_name;
	delete[]l_name;
	name = nullptr;
	s_name = nullptr;
	l_name = nullptr;
	cout << "Закріваем деструктор\n";
}

class DATE{
	unsigned int m_uDay;
	unsigned int m_uMonth;
	unsigned int m_uYear;
public:
	DATE(unsigned d = 1, unsigned m = 1, unsigned y = 1900);

	const unsigned int GetDay() const{ return m_uDay; }
	const unsigned int GetMonth() const{ return m_uMonth; };
	const unsigned int GetYear() const{ return m_uYear; }

	void SetDay(const unsigned d){ m_uDay = d; }
	void SetMonth(const unsigned m){ m_uMonth = m; };
	void SetYear(const unsigned y){ m_uYear = y; }
};
DATE::DATE(unsigned d, unsigned m, unsigned y)
{
	m_uDay = d;
	m_uMonth = m;
	m_uYear = y;
}

class Student{
	FIO m_fio;
	DATE m_date;
	char* m_sHome;
	char* m_sPhone;
	unsigned* m_uMarkZ = nullptr;
	unsigned m_uSizeZ;
	unsigned* m_uMarkK = nullptr;
	unsigned m_uSizeK;
	unsigned* m_uMarkE = nullptr;
	unsigned m_uSizeE;
	void iniPhone(const char*);
	void iniHome(const char*);
	void iniMark(unsigned*&, unsigned);
public:
	Student(FIO f, DATE d) :m_fio(f), m_date(d){};
	Student(FIO = {}, DATE = {}, unsigned = 5, unsigned = 5,
		unsigned = 5, char * = "Unknown",
		char * = "380000000000");
	Student(DATE d);
	Student(const Student& oth);

	const char* GetName()const{ return m_fio.GetName(); }
	const char* GetS_name()const{ return m_fio.GetS_name(); }
	const char* GetL_name()const{ return m_fio.GetL_name(); }
	const unsigned GetDay()const{ return m_date.GetDay(); }
	const unsigned GetMonth()const{ return m_date.GetMonth(); }
	const unsigned GetYear()const{ return m_date.GetYear(); }
	const char* GetHome()const{ return m_sHome; }
	const char* GetPhone()const{ return m_sPhone; }
	const unsigned GetSizeZ()const{ return m_uSizeZ; }
	const unsigned GetSizeK()const{ return m_uSizeK; }
	const unsigned GetSizeE()const{ return m_uSizeE; }
};

void Student::iniHome(const char* h)
{
	int capacity = strlen(h) + 1;
	m_sHome = new char[capacity];
	strcpy_s(m_sHome, capacity, h);
}
void Student::iniPhone(const char* p)
{
	int capacity = strlen(p) + 1;
	m_sPhone = new char[capacity];
	strcpy_s(m_sPhone, capacity, p);
}
inline void Student::iniMark(unsigned*& m, unsigned size)
{
	m = new unsigned[size];
}
Student::Student(FIO f, DATE d, unsigned z, unsigned k,
	unsigned e, char *h, char *p) :m_date(d), m_fio(f)
{
	iniPhone(p);
	iniHome(h);
	iniMark(m_uMarkZ, z);
	iniMark(m_uMarkK, k);
	iniMark(m_uMarkE, e);
}
Student::Student(DATE d) :m_date(d){
	iniPhone("380000000000");
	iniHome("Unknown");
	iniMark(m_uMarkZ, 5);
	iniMark(m_uMarkK, 5);
	iniMark(m_uMarkE, 5);
}

void main()
{
	setlocale(LC_ALL, "RUS");
	Student d = { { "VASYA" }, { 12, 12, 1989 }, 10, 10, 10,
		"Zabolotnogo", "380634903258" };
	//cout << d.GetName << endl;
	//Student c;
//	Student f = { { "Vasya" }, { 12 } };
	Student g = { { 12, 12, 1989 } };
	
}
