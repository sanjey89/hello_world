#include <fstream>
#include <iostream>
#include <string>
using namespace std;

class Pointer abstract {
protected:
	unsigned count;
	unsigned step;
public:
	Pointer() : count(0), step(1) {};
	Pointer(unsigned count) : count(0), step(1) {};

	virtual unsigned GetCount() const {
		return count;
	}
	virtual unsigned GetStep() const {
		return step;
	}

	virtual void SetStep(unsigned step) {
		this->step = step;
	}

	virtual unsigned operator++() {
		unsigned temp = count;
		count += step;
		return temp;
	}
	virtual unsigned operator++(int) {
		count += step;
		return count;
	}
};

class Pointer_for_LLOC: public Pointer{
public:
	Pointer_for_LLOC() {
		count = 0;
		step = 1;
	};
};

class FileAnalyze {
protected:
	Pointer_for_LLOC p; //количество полезных строк
	Pointer_for_LLOC p_empty; //количество пустых или заком.строк
	char EmptyStringAnalyze(ifstream& in)
	{
		char ch = '\0';
		for (; !in.eof();)
		{
			ch = in.peek();
			if (ch == ' ' || ch == '\n' || ch == '{' || ch == '}'
				|| ch == ')' || ch == ')' || ch == ';' || ch == '\r'
				|| ch == '/' || ch == '\t')
			{
				ch = in.get();
				if (ch == '\n') p_empty++;
				int ch1 = in.peek();
				if (ch1 == '/' && ch == '/')
					for (; !in.eof();)
					{
						ch = in.get();
						if (ch == '\n')
						{
							p_empty++;
							return ch;
						}
					}
				if (in.peek() == '*' && ch == '/')
				{
					in.seekg(-1, ios::cur);
					return ch;
				}
			}	
			else
			{
				return ch;
			}
		}
	}
	char CommentAnalyze(ifstream& in)
	{
		char ch = '\0';
		for (; !in.eof();)
		{
			ch = in.get();
			if (ch == '\n') p_empty++;
			if (ch == '*' && in.peek() == '/')
			{
				in.get();
				ch = EmptyStringAnalyze(in);
				return ch;
			}
		}
		return ch;
	}
	
public:
	FileAnalyze() {};
	
	bool Start(string fp)
	{
		char ch = '\0';
		ifstream in(fp);
		if (!in.is_open()) // если открытие файла завершилось неудачей - выходим
		{
			cout << "Error!\n";
			return false;
		}
		for (; !in.eof();)
		{
			ch = in.get();
			//проверяем не многострочный комментарий ли это
			if (ch == '/' && in.peek() == '*')
			{
				in.get();
				CommentAnalyze(in);
				//ch = in.peek();
			}
			//проверям не новая ли это строка
			if (ch == '\n')
			{
				p++;
				EmptyStringAnalyze(in);
			}
		}
	}
	unsigned GetP() {
		return p.GetCount();
	}
	unsigned GetP_empty()
	{
		return p_empty.GetCount();
	}
};

class ReadFile {
protected:
	string fp; //путь к файлу
	string fr; //путь к рапорту
	bool file_open;
	FileAnalyze analyze;
public:
	ReadFile(string fp, string fr) : fp(fp), fr(fr) {
		file_open = analyze.Start(fp);
	};
	unsigned GetP() {
		return analyze.GetP();
	}
	unsigned GetP_empty()
	{
		return analyze.GetP_empty();
	}
	void Report()
	{
		if (file_open == false)
		{
			cout << "Error!\n";
		}
		int LLOC = GetP();
		int not_used = GetP_empty();
		int total = LLOC + not_used;
		ofstream out(fr, ios::out);
		if (!out.is_open()) // если открытие файла завершилось неудачей - выходим
		{
			cout << "Error!\n";
			return;
		}
		out << "<!DOCTYPE html>" << '\n';
		out << "<html>" << '\n';
		out << '\t' << "<head>" << '\n';
		out << '\t' << '\t' << "<meta charset=\"utf - 8\">" << '\n';
		out << '\t' << '\t' << "<title>" << '\n';
		out << '\t' << '\t' << " Report:" << '\n';
		out << '\t' << '\t' << "</title>" << '\n';
		out << '\t' << "</head>" << '\n';
		out << '\t' << "<body>" << '\n';
		out << '\t' << '\t' << "<p>" << '\n';
		out << '\t' << '\t' << " Total: " << total << "<br>" << '\n';
		out << '\t' << '\t' << " LLOC: " << LLOC << "<br>" << '\n';
		out << '\t' << '\t' << " Not used: " << not_used << "<br>" << '\n';
		out << '\t' << '\t' << "</p>" << '\n';
		out << '\t' << "</body>" << '\n';
		out << "</html>" << '\n';
		out.close();
	}
};

int main(void)
{
	char fp[300]; //путь к считываемому файлу
	char fr[300]; //путь к отчету
	cout << "Enter file path:  (e.g. C:\\path\\file_name.txt) ";
	cout << endl;
	gets_s(fp);
	cout << endl;
	cout << "Enter report path: (e.g. C:\\path\\report_name.html) ";
	cout << endl;
	gets_s(fr);
	cout << endl;
	ReadFile r(fp, fr);
	r.Report();
}
