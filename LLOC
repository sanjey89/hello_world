/*#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
using namespace std;

void main()
{
	unsigned p = 0; //счетчик строк
	cout << "Enter:\n";
	char* path = new char[100];
	gets_s(path, 100);
	cout << path << '\n';
	FILE* f;
	if ((f = fopen(path, "r")) == NULL) {
		cout << "Error\n";
		exit(1);
	}
	//bool key = true; //открывает либо закрывает счетчик
	for (char ch = fgetc(f); ch != EOF;)
	{
		if (ch == '\n') 
			p++;
		ch = fgetc(f);
	}
	fclose(f);
	cout << p << '\n';
}*/

#include <fstream>
#include <iostream>
#include <string>
using namespace std;

class Stack
{
	int* ptr_stack;
	int top; // индекс вершины стека
	int size;

public:
	Stack() : top(0), size(10)
	{
		ptr_stack = new int[10];
	}

	void Clear()
	{
		top = 0;
		delete[]ptr_stack;
		size = 10;
		ptr_stack = new int[size];
	}

	bool IsEmpty()
	{
		return top == 0;
	}

	bool IsFull()
	{
		return top == size;
	}

	int GetCount()
	{
		return top;
	}

	void Push(int digit)
	{
		if (!IsFull())
			ptr_stack[top++] = digit;
		else
		{
			//size *= 2;
			int* temp_stack = new int[size * 2];
			for (int i = 0; i < size; i++)
				temp_stack[i] = ptr_stack[i];
			delete[] ptr_stack;
			ptr_stack = temp_stack;
			ptr_stack[top++] = digit;
			size *= 2;
		}
	}
	void PushIf(int digit)
	{
		if (Contains(digit)) return;
		Push(digit);
	}

	int Pop()
	{
		if (!IsEmpty())
			return ptr_stack[--top];
		else throw "Stack is empty!";
	}
	int Peek()
	{
		if (!IsEmpty())
			return ptr_stack[top - 1];
		else throw "Stack is empty!";
	}
	bool Contains(int value) const
	{
		for (int i = 0; i < size; i++)
			if (ptr_stack[i] == value)
				return true;
		return false;
	}
	~Stack()
	{
		delete[]ptr_stack;
		ptr_stack = nullptr;
	}
};

class Pointer abstract {
protected:
	unsigned count;
	unsigned step;
public:
	Pointer() : count(0), step(1) {};
	Pointer(unsigned count) : count(0), step(1) {};

	virtual unsigned GetCount() const {
		return count;
	}
	virtual unsigned GetStep() const {
		return step;
	}

	virtual void SetStep(unsigned step) {
		this->step = step;
	}

	virtual unsigned operator++() {
		unsigned temp = count;
		count += step;
		return temp;
	}
	virtual unsigned operator++(int) {
		count += step;
		return count;
	}
};

class Pointer_for_LLOC: public Pointer{
public:
	Pointer_for_LLOC() {
		count = 0;
	};
};

class FileAnalyze {
protected:
	Pointer_for_LLOC p; //количество строк
public:
	FileAnalyze() {};
	
	void Start(string fp)
	{
		char ch = '\0';
		ifstream in(fp);
		if (!in.is_open()) // если открытие файла завершилось неудачей - выходим
		{
			cout << "Error!\n";
			return;
		}
		//ch = in.get();
		for (;!in.eof();)
		{
			ch = in.get();
			if (ch == '/')
			{
				ch = in.get();
				if (ch == '*')
				{
					for (; !in.eof();)
					{
						ch = in.get();
						if (ch == '*')
						{
							ch = in.peek();
							if (ch == '/')
							{
								ch = in.get();
								if (ch == '\n')
									ch = in.get();
								break;
							}
						}
					}
				}
			}
			//cout << ch;
			if (ch == '\n')
				p++;
		}
	}
	unsigned GetP() {
		return p.GetCount();
	}
};

class ReadFile {
protected:
	string fp; //путь к файлу
	FileAnalyze analyze;
public:
	ReadFile(string fp) : fp(fp) {
		analyze.Start(fp);
	};
	unsigned GetP() {
		return analyze.GetP();
	}
};

int main(void)
{
	string fp = "file.txt";
	ReadFile r(fp);
	cout << r.GetP() << endl;
}
