#include <iostream>
#include <string>
using namespace std;

class DATA
{
public:
	int day = 1;
	int month = 1;
	int year = 1900;
public:
	DATA(){};
	DATA(int d, int m = 1, int y = 1900) :day(d), month(m), year(y){};
	friend ostream& operator<<(ostream& os, const DATA& dt)
	{
		cout << dt.day << "." << dt.month << "." << dt.year;
		return os;
	}
};
template <class T>
struct Elem{
	T data;
	Elem<T>* next;
	Elem<T>* prev;
};
template <class T>
class List
{
private:
	Elem<T>* head;
	Elem<T>* tail;
	int count;
public:
	List(){
		head = tail = nullptr;
		count = 0;
	}
	void AddElem(T data)
	{
		Elem<T>* temp = new Elem<T>;
		temp->data = data;
		if (head == nullptr)
		{
			head = tail = temp;
			head->next = nullptr;
			head->prev = nullptr;
		}
		else
		{
			temp->next = head;
			head->prev = temp;
			head = temp;
			temp->prev = nullptr;
		}
		count++;
	}
	void AddTail(T data)
	{
		Elem<T>* temp = new Elem<T>;
		if (head == nullptr)
		{
			head = temp;
			tail = temp;
			head->data = data;
			head->next = nullptr;
			head->prev = nullptr;
			return;
		}
		temp->data = data;
		temp->next = nullptr;
		temp->prev = tail;
		tail->next = temp;
		tail = temp;
		count++;
	}
	int GetCount() const
	{
		return count;
	}
	T& GetHead() const
	{
		return head->data;
	}

	T& GetTail() const
	{
		return tail->data;
	}

	bool RemoveHead()
	{
		if (head != nullptr && count > 1)
		{
			Elem<T>* temp = head;
			head = head->next;
			head->prev = nullptr;
			delete temp;
			count--;
		}
		else if (count == 1)
		{
			delete head;
			head = nullptr;
			tail = nullptr;
			count--;
		}
		else return false;
		return true;
	}

	bool RemoveTail()
	{
		if (head != nullptr && count > 1)
		{
			Elem<T>* temp = tail;
			tail = tail->prev;
			tail->next = nullptr;
			delete temp;
			count--;
		}
		else if (count == 1)
		{
			delete tail;
			head = nullptr;
			tail = nullptr;
			count--;
		}
		else return false;
		return true;
	}
	Elem<T>* GetElemAtIndex(unsigned index)
	{
		/*if (head == nullptr) return nullptr;
		else
		{*/
		Elem<T>* current = head;
		for (int i = 0; i < index; i++)
		{
			current = current->next;
		}
		return current;
		/*}*/
	}
	bool RemoveAtIndex(int index)
	{
		Elem<T>* current = head;
		if (index == 0)
			return RemoveHead();
		else if (index == count)
			return RemoveTail();
		else if (index > count) return false;
		else
		{
			Elem<T>* temp = GetElemAtIndex(index);
			(temp->next)->prev = temp->prev;
			(temp->prev)->next = temp->next;
			delete temp;
		}
	}
	void Clear()
	{

		while (RemoveHead()){};
	}
	bool IsEmpty()
	{
		if (head == nullptr)
			return true;
		return false;
	}
	T& SearchAsIndex(int index)
	{
		Elem<T>* current = head;
		for (int i = 0;; i++)
		{
			if (i == index)
				return current->data;
			current = current->next;
		}
	}
	bool Contains(T s)
	{
		Elem<T>* current = head;
		for (; current != 0;)
		{
			if (current->data == s) return true;
			current = current->next;
		}
		return false;
	}
	void Print()
	{
		Elem<T>* current = head;
		while (current != nullptr)
		{
			cout << current->data << " ";
			current = current->next;
		}
	}
	void PrintAdIndex(int index)
	{
		Elem<T>* current = head;
		//	if (head = nullptr) return;
		//	cout << current << endl;
		for (int i = 0; i < index; i++)
		{
			current = current->next;
		}
		cout << current->data << " ";
	}
	void PrintRevers()
	{
		Elem<T>* current = tail;
		while (current != nullptr)
		{
			cout << current->data << " ";
			current = current->prev;
		}
	}
};
class CarInfo
{
public:
	string car_number;
	List<string> violations_list;
	List<DATA> violations_data;
	List<unsigned> penalty;
	void AddViolation(string v, DATA d, unsigned p)
	{
		violations_list.AddTail(v);
		violations_data.AddTail(d);
		penalty.AddTail(p);
	}
};
struct Node // one element of the tree
{
	CarInfo info; // useful data

	Node* parent;
	Node* right;
	Node* left;

	void ShowNode()
	{
		cout << info.car_number << ":\n";
		int count = info.violations_list.GetCount();
		for (int i = 0; i < count; i++)
		{
			info.violations_data.PrintAdIndex(i);
			cout << " ";
			info.violations_list.PrintAdIndex(i);
			info.penalty.PrintAdIndex(i);
			cout << " hrn\n";
		}
	}
};
class BinaryTree
{
	Node* root;
	// int count;

public:
	BinaryTree()
	{
		root = 0;
	}

	bool IsEmpty()
	{
		return root == 0;
	}

	~BinaryTree()
	{
		Clear();
	}

private:
	void ShowTree(Node* elem)
	{
		if (elem != 0)
		{
			ShowTree(elem->left);
			elem->ShowNode();
			//cout << endl;
			ShowTree(elem->right);
		}
	}
	void ShowIfViolation(Node* elem, string violation)
	{
		if (elem != 0)
		{
			ShowIfViolation(elem->left, violation);
			if (elem->info.violations_list.Contains(violation))
				elem->ShowNode();
			ShowIfViolation(elem->right, violation);

		}
	}

public:
	void ShowTree()
	{
		cout << "\n\n";
		ShowTree(root);
		cout << "\n\n";
	}
	void ShowIfViolation(string violation)
	{
		cout << "\n\n";
		ShowIfViolation(root, violation);
		cout << "\n\n";
	}

	Node* GetRoot()
	{
		return root;
	}

private:
	int GetCount(Node* elem, int count)
	{
		if (elem != 0)
		{
			count = GetCount(elem->left, count);
			count++;
			count = GetCount(elem->right, count);
		}
		return count;
	}

public:
	int GetCount()
	{
		int count = 0;
		count = GetCount(root, count);
		return count;
	}

private:
	void Clear(Node* elem)
	{
		if (elem != 0)
		{
			Clear(elem->left);
			Clear(elem->right);
			delete elem;
			elem = 0;
		}
	}

public:
	void Clear()
	{
		if (!IsEmpty())
		{
			Clear(root);
			root = 0;
		}
	}

	Node* FindNode(string value)
	{
		if (IsEmpty())
			return 0;
		else
		{
			Node* f = root;
			while (true)
			{
				if (value < f->info.car_number)
				{
					if (f->left != 0)
						f = f->left;
					else
						break;
				}
				else if (value > f->info.car_number)
				{
					if (f->right != 0)
						f = f->right;
					else
						break;
				}
				else
					return f;
			}
			return 0;
		}
	}

	void AddNode(CarInfo value)
	{
		if (FindNode(value.car_number))
			return;
		Node* n = new Node;
		n->right = n->left = 0;
		n->info = value;
		Node* parent = 0;
		if (IsEmpty())
		{
			root = n;
			root->parent = parent;
		}
		else
		{
			Node*p = root;
			while (p != 0)
			{
				parent = p;
				if (n->info.car_number>p->info.car_number)
					p = p->right;
				else
					p = p->left;
			}
			if (n->info.car_number<parent->info.car_number)
				parent->left = n;
			else
				parent->right = n;
			n->parent = parent;
		}
	}

	void AddViolationByNumber(string n, string v, DATA d, int p)
	{
		Node* temp;
		if (!FindNode(n)) return;
		temp = FindNode(n);
		temp->info.violations_list.AddElem(v);
		temp->info.violations_data.AddElem(d);
		temp->info.penalty.AddElem(p);
	}

	void AddNodeByCarNumber(string n)
	{
		CarInfo* temp;
		temp = new CarInfo;
		temp->car_number = n;
		AddNode(*temp);
	}
	BinaryTree& operator = (const BinaryTree& obj)
	{
		if (!IsEmpty())
			Clear();
		AddNode(obj.root->info);
		Copy(obj.root);
		return *this;
	}

	BinaryTree(const BinaryTree& obj)
	{
		root = 0;
		AddNode(obj.root->info);
		Copy(obj.root);
	}

	void Copy(Node* elem)
	{
		if (elem->left != 0)
			AddNode(elem->left->info);
		if (elem->right != 0)
			AddNode(elem->right->info);
		if (elem->left != 0)
			Copy(elem->left);
		if (elem->right != 0)
			Copy(elem->right);
	}

	void DeleteNode(string value)
	{
		Node* d = FindNode(value);
		if (d == 0)
			return;
		Node* parent = d->parent;
		if (d == root && GetCount() == 1)
		{
			Clear();
			return;
		}
		if (d->left == 0 && d->right == 0)
		{
			if (parent->left == d)
				parent->left = 0;
			else
				parent->right = 0;
			delete d;
			return;
		}
		if (d->left == 0 && d->right != 0)
		{
			if (parent->left == d)
			{
				parent->left = d->right;
			}
			else
			{
				parent->right = d->right;

			}
			d->right->parent = parent;
			delete d;
			return;
		}
		if (d->left != 0 && d->right == 0)
		{
			if (parent->left == d)
			{
				parent->left = d->left;
			}
			else
			{
				parent->right = d->left;

			}
			d->left->parent = parent;
			delete d;
			return;
		}
		if (d->left != 0 && d->right != 0)
		{
			Node*r = d->right;
			if (r->right == 0 && r->left == 0)
			{
				d->info = r->info;
				d->right = 0;
				delete r;
			}
			else if (r->left != 0)
			{
				Node*p = r->left;
				while (p->left != 0)
					p = p->left;
				d->info = p->info;
				if (p->right == 0)
					p->parent->left = 0;
				else
					p->parent->left = p->right;
				delete p;
			}
			else
			{
				d->info = r->info;
				d->right = r->right;
				delete r;
			}
		}
	}
};
void main()
{
	BinaryTree bt;
	//CarInfo ci;
	bt.AddNodeByCarNumber("BH-1234");
	bt.AddNodeByCarNumber("BH-1235");
	bt.AddNodeByCarNumber("BH-1236");
	bt.AddViolationByNumber("BH-1234", "proezd na krasnij", { 10, 6, 2015 }, 500);
	bt.AddViolationByNumber("BH-1234", "ne pristegnyt", { 12, 5	, 2015 }, 300);
	bt.AddViolationByNumber("BH-1235", "proezd na krasnij", { 10, 6, 2015 }, 500);
	bt.AddViolationByNumber("BH-1235", "ne pristegnyt", { 12, 5, 2015 }, 300);
	bt.AddViolationByNumber("BH-1236", "proezd na krasnij", { 10, 6, 2015 }, 500);
	bt.AddViolationByNumber("BH-1236", "ne pristegnyt", { 12, 5, 2015 }, 300);
	bt.ShowTree();
	//показать по правонарушению
	//bt.ShowIfViolation("net aptechki");*/
}
