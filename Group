#include <iostream>
using namespace std;

class FIO{
	char* name;
	char* s_name;
	char* l_name;

	void del();

public:
	FIO(char* n, char* s, char* l);
	FIO();
	//FIO(char*);
	//FIO(char*, char*);
	FIO(const FIO& oth);

	const char* GetName()const{ return name; }
	const char* GetS_name()const{ return s_name; }
	const char* GetL_name()const{ return l_name; }

	void SetName(const char* n);
	void SetSurname(const char* s);
	void SetLastname(const char* l);

	const FIO& operator=(FIO&);
	const FIO& operator=(char*);

	//перегрузка круглых скобок
	void operator()(FIO&);
	void operator()(char*);
	void operator()(char*, char*);
	void operator()(char*, char*, char*);
	const char* operator[](unsigned int);

	void Show()const;

	~FIO();
};

const char* FIO::operator[](unsigned int key)
{
	switch (key)
	{
	case 1:
	default:
		return name;
	case 2:
		return s_name;
	case 3:
		return l_name;
	}
}
void FIO::del()
{

	delete[]name;
	name = nullptr;
	delete[]s_name;
	s_name = nullptr;
	delete[]l_name;
	l_name = nullptr;
}
void FIO::operator()(FIO& oth)
{
	del(); //очищаем выделенные блоки под ФИО
	int capacity = strlen(oth.name) + 1;
	name = new char[capacity];
	strcpy_s(name, capacity, oth.name);

	capacity = strlen(oth.s_name) + 1;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, oth.s_name);

	capacity = strlen(oth.l_name) + 1;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, oth.l_name);
}
void FIO::operator()(char* n)
{
	delete[]name;
	int capacity = strlen(n) + 1;
	name = new char[capacity];
	strcpy_s(name, capacity, n);
}
void FIO::operator()(char* n, char* s)
{
	operator()(n);

	delete[]s_name;
	int capacity = strlen(s) + 1;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, s);
}
void FIO::operator()(char* n, char* s, char* l)
{
	operator()(n, s);

	delete[]l_name;
	int capacity = strlen(l) + 1;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, l);
}

void FIO::Show()const
{
	cout << name << " " << s_name << " " << l_name;
}
const FIO& FIO::operator=(FIO& oth)
{
	if (this == &oth) return *this; //проверка на самоприсваивание
	int capacity = strlen(oth.name) + 1;
	delete[]name;
	name = new char[capacity];
	strcpy_s(name, capacity, oth.name);

	capacity = strlen(oth.s_name) + 1;
	delete[]s_name;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, oth.s_name);

	capacity = strlen(oth.l_name) + 1;
	delete[]l_name;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, oth.l_name);

	return *this;
}
const FIO& FIO::operator=(char*n)
{
	operator()(n);
	return *this;
}

FIO::FIO(char* n, char* s = "Unknown2", char* l = "Unknown3")
{
	int capacity = strlen(n) + 1;
	name = new char[capacity];
	strcpy_s(name, capacity, n);

	capacity = strlen(s) + 1;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, s);

	capacity = strlen(l) + 1;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, l);
}
FIO::FIO() : FIO("Unknown1", "Unknown2", "Unknown3"){};
//FIO::FIO(char* n) : FIO(n, "Unknown", "Unknown"){};
//FIO::FIO(char* n, char* s) : FIO(n, s, "Unknown"){};
FIO::FIO(const FIO& oth)
{
	int capacity = strlen(oth.name) + 1;
	name = new char[capacity];
	strcpy_s(name, capacity, oth.name);

	capacity = strlen(oth.s_name) + 1;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, oth.s_name);

	capacity = strlen(oth.l_name) + 1;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, oth.l_name);
}
void FIO::SetName(const char* n)
{
	int capacity = strlen(n) + 1;
	delete[]name;
	name = new char[capacity];
	strcpy_s(name, capacity, n);
}
void FIO::SetSurname(const char* s)
{
	int capacity = strlen(s) + 1;
	delete[]s_name;
	s_name = new char[capacity];
	strcpy_s(s_name, capacity, s);
}
void FIO::SetLastname(const char* l)
{
	int capacity = strlen(l) + 1;
	delete[]l_name;
	l_name = new char[capacity];
	strcpy_s(l_name, capacity, l);
}

FIO::~FIO()
{
	delete[]name;
	delete[]s_name;
	delete[]l_name;
	name = nullptr;
	s_name = nullptr;
	l_name = nullptr;
}

class DATE{
	unsigned int m_uDay = 1;
	unsigned int m_uMonth = 1;
	unsigned int m_uYear = 1900;
public:
	DATE(unsigned d = 1, unsigned m = 1, unsigned y = 1900);

	void resetDate(){ m_uDay = 1, m_uMonth = 1, m_uYear = 1990; }
	void Show(){ cout << m_uDay << "." << m_uMonth << "." << m_uYear; }

	int operator[](unsigned);
	void operator()(unsigned d) { m_uDay = d; }
	void operator()(unsigned d, unsigned m) { m_uDay = d; m_uMonth = m; }
	void operator()(unsigned d, unsigned m, unsigned y) { m_uDay = d; m_uMonth = m; m_uYear = y; }
	void operator++();
	void operator++(int);//int это просто заглушка
	void operator--();
	void operator--(int);
	DATE& operator+(int);
	DATE& operator-(int);


	const unsigned int GetDay() const{ return m_uDay; }
	const unsigned int GetMonth() const{ return m_uMonth; };
	const unsigned int GetYear() const{ return m_uYear; }

	void SetDay(const unsigned d){ m_uDay = d; }
	void SetMonth(const unsigned m){ m_uMonth = m; };
	void SetYear(const unsigned y){ m_uYear = y; }
};
DATE::DATE(unsigned d, unsigned m, unsigned y)
{
	m_uDay = d;
	m_uMonth = m;
	m_uYear = y;
}

int DATE::operator[](unsigned key)
{
	switch (key)
	{
	case 1:
	default:
		return m_uDay;
	case 2:
		return m_uMonth;
	case 3:
		return m_uYear;
	}
}
void DATE::operator++()
{
	m_uYear++;
}
void DATE::operator++(int)
{
	m_uYear++;
}
void DATE::operator--()
{
	m_uYear--;
}
void DATE::operator--(int)
{
	m_uYear--;
}
DATE& DATE::operator+(int y)
{
	m_uYear += y;
	return *this;
}
DATE& DATE::operator-(int y)
{
	m_uYear -= y;
	return *this;
}

class MARK{
	int* m_mark;
	unsigned size;
public:
	MARK(unsigned);
	MARK();
	MARK(MARK&);

	void Show()const;

	void SetMark(unsigned size, int count);
	int GetMark(unsigned position)const;
	float GetAverange()const;

	int& operator[](unsigned);
	void operator=(MARK&);
	void operator++();
	void operator++(int);
	void operator--();
	void operator--(int);

	~MARK();
};
//гетеры сетеры
void MARK::SetMark(unsigned position, int count)
{
	m_mark[position] = count;
}
int MARK::GetMark(unsigned position)const
{
	if (position <= this->size)
		return m_mark[position];
	else return m_mark[0];
}
float MARK::GetAverange()const
{
	float sum = 0;
	float averange = 0;
	for (unsigned i = 0; i < size; i++)
	{
		if (!m_mark[i]) return averange = (float(sum) / float(i + 1));
		sum += m_mark[i];
	}
	return averange = (float(sum) / size);
}
//перегруженные операторы
int& MARK::operator[](unsigned ind)
{
	if (ind <= size)
		return m_mark[ind];
	return m_mark[size - 1];
}
void MARK::operator=(MARK& oth)
{
	size = oth.size;
	m_mark = new int[size];
	for (unsigned i = 0; i < size; i++) { m_mark[i] = oth.m_mark[i]; }
}
//перегрузка инкремента, декремента
void MARK::operator++()
{
	int* tmp_mark;
	tmp_mark = new int[size + 1];
	tmp_mark[size] = 0;
	for (unsigned i = 0; i < size; i++){ tmp_mark[i] = m_mark[i]; }
	delete[]m_mark;
	m_mark = tmp_mark;
	tmp_mark = nullptr;
	size++;
}
void MARK::operator--(int)
{
	operator--();
}
void MARK::operator--()
{
	int* tmp_mark = new int[size - 1];
	for (unsigned i = 0; i < size - 1; i++)
	{
		tmp_mark[i] = m_mark[i];
	}
	delete[]m_mark;
	m_mark = tmp_mark;
	tmp_mark = nullptr;
	size--;
}
void MARK::operator++(int)
{
	operator++();
}
//конструкторы, деструктор
MARK::MARK(unsigned size)
{
	this->size = size;
	m_mark = new int[size];
	for (unsigned i = 0; i < size; i++){ m_mark[i] = 0; }
}
MARK::MARK() :MARK(5){};
MARK::MARK(MARK& oth)
{
	size = oth.size;
	m_mark = new int[size];
	for (unsigned i = 0; i < size; i++) { m_mark[i] = oth.m_mark[i]; }
}
MARK::~MARK()
{
	delete[] m_mark;
	m_mark = nullptr;
}
//прочие методы
void MARK::Show()const
{
	for (unsigned i = 0; i < size; i++)
	{
		cout << m_mark[i] << " ";
		if (i != 0 && !(i % 5)) cout << endl;
	}
}

class Student{
	FIO m_fio;
	DATE m_date;
	char* m_sHome = nullptr;
	char* m_sPhone = nullptr;
	MARK mark_zach;
	MARK mark_kurs;
	MARK mark_exam;

	void iniPhone(const char*);
	void iniHome(const char*);
	void iniMark(MARK& mark);

	//	~Student();
public:
	//Student(FIO f, DATE d) :m_fio(f), m_date(d){};
	/*Student(FIO f, DATE d, unsigned = 5, unsigned = 5,
	unsigned = 5, char* = "Unknown",
	char* = "380000000000");*/
	/*Student(DATE d);*/
	Student();
	Student(FIO f);
	Student(FIO f, DATE d);
	Student(FIO f, DATE d, char*, char*);
	//Student(const Student& oth);
	const char* GetName()const{ return m_fio.GetName(); }
	const char* GetS_name()const{ return m_fio.GetS_name(); }
	const char* GetL_name()const{ return m_fio.GetL_name(); }
	const unsigned GetDay()const{ return m_date.GetDay(); }
	const unsigned GetMonth()const{ return m_date.GetMonth(); }
	const unsigned GetYear()const{ return m_date.GetYear(); }
	const char* GetHome()const{ return m_sHome; }
	const char* GetPhone()const{ return m_sPhone; }
	float GetAverangeMark();
	DATE& GetDATE(){ return m_date; }
	FIO& GetFIO(){ return m_fio; }
	MARK& GetMark(unsigned);

	void SetFIO(FIO oth);
	void SetDATE(DATE oth);
	void SetHome(char* h);
	void SetPhone(char* p);

	Student& operator=(Student& oth);
	void operator()(char*);
	void operator()(char*, char*);
	void operator()(char*, char*, char*);

	void Show() const;
	~Student();
};
//конструкторы
Student::Student()
{
	iniPhone("380000000000");
	iniHome("UnknownHome");
}
Student::Student(FIO f)
{
	m_fio = f;
	iniPhone("380000000000");
	iniHome("UnknownHome");
}
Student::Student(FIO f, DATE d) :m_fio(f), m_date(d)
{
	iniPhone("380000000000");
	iniHome("UnknownHome");
}
Student::Student(FIO f, DATE d, char* p, char* h) : m_fio(f), m_date(d)
{
	iniHome(h);
	iniPhone(p);
}
Student::~Student()
{
	delete[]m_sHome;
	delete[]m_sPhone;
}
//приватные инициализаторы
void Student::iniHome(const char* h)
{
	if (m_sHome) delete[]m_sHome;
	int capacity = strlen(h) + 1;
	m_sHome = new char[capacity];
	strcpy_s(m_sHome, capacity, h);
}
void Student::iniPhone(const char* p)
{
	if (m_sPhone) delete[]m_sPhone;
	int capacity = strlen(p) + 1;
	m_sPhone = new char[capacity];
	strcpy_s(m_sPhone, capacity, p);
}
//гетеры
MARK& Student::GetMark(unsigned key)
{
	if (key == 1) return mark_zach;
	else if (key == 2) return mark_kurs;
	else return mark_exam;
}
//сетеры
void Student::SetFIO(FIO oth)
{
	m_fio.SetName(oth.GetName());
	m_fio.SetSurname(oth.GetS_name());
	m_fio.SetLastname(oth.GetL_name());
}
void Student::SetDATE(DATE oth)
{
	m_date = oth;
}
void Student::SetHome(char* oth)
{
	iniHome(oth);
}
void Student::SetPhone(char* oth)
{
	iniPhone(oth);
}
//перегрузка операторов
Student& Student::operator=(Student& oth)
{
	m_fio = oth.m_fio;
	m_date = oth.m_date;
	m_sHome = nullptr;
	iniHome(oth.m_sHome);
	m_sPhone = nullptr;
	iniPhone(oth.m_sPhone);
	mark_zach = oth.mark_zach;
	mark_exam = oth.mark_exam;
	mark_kurs = oth.mark_kurs;
	return *this;
}
void Student::operator()(char* n)
{
	m_fio(n);
}
void Student::operator()(char* n, char* s)
{
	m_fio(n, s);
}
void Student::operator()(char* n, char* s, char* l)
{
	m_fio(n, s, l);
}

//Student::Student(const Student& oth)
//{
//	m_sHome = new char[200];
//	m_sPhone = new char[200];
//}

//прочие
void Student::Show() const
{
	cout << this->GetName() << " " << this->GetS_name() << " " << this->GetL_name() << endl;
	cout << GetDay() << "." << GetMonth() << " " << GetYear() << endl;
	cout << GetPhone() << " " << GetHome() << endl;
}
float Student::GetAverangeMark()
{
	float averange = 0;
	int p = 0;
	if (GetMark(0).GetAverange() > 0)
	{
		averange += GetMark(0).GetAverange();
		p++;
	}

	if (GetMark(1).GetAverange() > 0)
	{
		averange += GetMark(1).GetAverange();
		p++;
	}
	if (GetMark(2).GetAverange() > 0)
	{
		averange += GetMark(2).GetAverange();
		p++;
	}
	if (p > 0) averange /= p;
	return averange;
}
class Group
{
	Student** ptr_p_stud;
	unsigned size_group;
public:
	Group();
	Group(unsigned);
	Group(Group&&);
	Group(Group&);
	Group(Student*, unsigned);

	~Group();

	unsigned GetSize();
	Student& GetStudent(unsigned);

	Student& operator[](unsigned);
	Group operator+(Group& oth);
	Group& operator=(Group& oth);

	Group& operator++();
	Group operator++(int);
	Group& operator--();
	Group operator--(int);
	bool operator==(Group&);
	bool operator>(Group&);
	bool operator<(Group&);
	bool operator<=(Group&);
	bool operator>=(Group&);
	Student& operator()(unsigned);

	void ShowStudents();
	void SortByName();
	void SortBySurname();
	void Del_if_Low_Mark(float);
	void transfer(unsigned, Group&, unsigned);
};

//конструкторы и деструктор
Group::Group()
{
	size_group = 0;
	ptr_p_stud = nullptr;
}
Group::Group(unsigned size)
{
	size_group = size;
	ptr_p_stud = new Student*[size];
	for (unsigned i = 0; i < size_group; i++)
		ptr_p_stud[i] = new Student;
}
Group::Group(Group&& oth)
{
	this->size_group = oth.size_group;
	this->ptr_p_stud = oth.ptr_p_stud;
	//oth.size_group = 0;
	oth.ptr_p_stud = nullptr;
}
Group::Group(Group& oth)
{
	size_group = oth.size_group;
	ptr_p_stud = new Student*[size_group];
	for (unsigned i = 0; i < size_group; i++)
		ptr_p_stud[i] = new Student(oth[i]);
}
Group::Group(Student* ptr_s, unsigned size)
{
	size_group = size;
	ptr_p_stud = new Student*[size_group];
	for (unsigned i = 0; i < size; i++)
	{
		ptr_p_stud[i] = new Student(ptr_s[i]);
	}
}
Group::~Group()
{
	delete[]ptr_p_stud;
	ptr_p_stud = nullptr;
}
//геттеры
unsigned Group::GetSize()
{
	return size_group;
}
Student& Group::GetStudent(unsigned position)
{
	return *(ptr_p_stud[position]);
}
//перегруженные операторы
Student& Group::operator[](unsigned position)
{
	return *(ptr_p_stud[position]);
}
Group Group::operator+(Group& oth)
{
	unsigned size_new_g = oth.size_group + this->size_group;
	Group temp;
	temp.size_group = size_new_g;
	temp.ptr_p_stud = new Student*[temp.size_group];
	for (unsigned i = 0; i < size_group; i++)
	{
		temp.ptr_p_stud[i] = new Student(*ptr_p_stud[i]);
	}
	for (unsigned i = size_group, j = 0; i < oth.size_group + size_group; i++, j++)
	{
		temp.ptr_p_stud[i] = new Student(*(oth.ptr_p_stud[j]));
	}

	return temp;
}
Group& Group::operator=(Group& oth)
{
	for (unsigned i = 0; i < size_group; i++)
		delete ptr_p_stud[i];
	delete[]ptr_p_stud;
	size_group = oth.size_group;
	for (unsigned i = 0; i < size_group; i++)
		(*this)[i] = oth[i];
	return *this;
}
Group& Group::operator++()
{
	size_group++;
	Student** temp = new Student*[size_group];
	temp[size_group - 1] = new Student();
	for (unsigned i = 0; i < size_group - 1; i++)
		temp[i] = ptr_p_stud[i];
	delete[] ptr_p_stud;
	ptr_p_stud = temp;
	return *this;
}
Group Group::operator++(int)
{
	Group temp = *this;
	operator++();
	return temp;
}
Group& Group::operator--()
{
	Student** temp = new Student*[--size_group];
	for (unsigned i = 0; i < size_group; i++)
	{
		temp[i] = ptr_p_stud[i];
	}
	delete[] ptr_p_stud;
	ptr_p_stud = temp;
	return *this;
}
Group Group::operator--(int)
{
	Group temp = *this;
	operator--();
	return temp;
}
bool Group::operator==(Group& oth)
{
	if (size_group == oth.size_group)
	{
		for (unsigned i = 0; i < size_group; i++)
		{
			if (!(strstr(ptr_p_stud[i]->GetName(), oth.ptr_p_stud[i]->GetName())))
			{
				return false;
			}
			if (!(strstr(ptr_p_stud[i]->GetS_name(), oth.ptr_p_stud[i]->GetS_name())))
			{
				return false;
			}
			if (!(strstr(ptr_p_stud[i]->GetL_name(), oth.ptr_p_stud[i]->GetL_name())))
			{
				return false;
			}
			if ((ptr_p_stud[i]->GetDay()) != (oth.ptr_p_stud[i]->GetDay())) return false;
			if ((ptr_p_stud[i]->GetMonth()) != (oth.ptr_p_stud[i]->GetMonth())) return false;
			if ((ptr_p_stud[i]->GetYear()) != (oth.ptr_p_stud[i]->GetYear())) return false;
		}
		return true;
	}
	return false;
}
bool Group::operator>(Group& oth)
{
	if (*this == oth) return false;
	if (size_group == oth.size_group) return false;
	else if (size_group < oth.size_group) return false;
	else return true;
}
bool Group::operator<(Group& oth)
{
	if (*this == oth) return false;
	return !operator>(oth);
}
bool Group::operator>=(Group& oth)
{
	if (*this == oth) return true;
	if (size_group > oth.size_group)return true;
	else if (size_group < oth.size_group)return false;
	return operator==(oth);
}
bool Group::operator<=(Group& oth)
{
	if (*this == oth) return true;
	if (size_group < oth.size_group)return true;
	else if (size_group > oth.size_group)return false;
	return operator==(oth);
}
Student& Group::operator()(unsigned pos)
{
	return operator[](pos);
}
//прочие функции
void Group::ShowStudents()
{
	for (unsigned i = 0; i < size_group; i++)
	{
		cout << "#" << i + 1 << "." << " ";
		GetStudent(i).Show();
		cout << endl;
	}
}
void Group::SortByName()
{
	int key;
	Student** pptr_stud_temp = new Student*[size_group];
	for (unsigned i = 1; i < size_group; i++)
	{
		for (int j = i; j>0; j--)
		{
			key = (strcmp((*this)[j].GetName(), (*this)[j - 1].GetName()));
			if (key < 0) { swap(ptr_p_stud[j], ptr_p_stud[j - 1]); }
			else break;
		}
	}
}
void Group::SortBySurname()
{
	int key;
	Student** pptr_stud_temp = new Student*[size_group];
	for (unsigned i = 1; i < size_group; i++)
	{
		for (int j = i; j>0; j--)
		{
			key = (strcmp((*this)[j].GetS_name(), (*this)[j - 1].GetS_name()));
			if (key < 0) { swap(ptr_p_stud[j], ptr_p_stud[j - 1]); }
			else break;
		}
	}
}
void Group::Del_if_Low_Mark(float low)
{
	/*for (int i = 0; i < size_group; i++)
	{
		cout << endl;
		cout << "AverangeMark() Student #" << i << " " << (*this)[i].GetAverangeMark();
		cout << endl;
	}*/
	int p = size_group; //счетчик
	bool flag = false; //будут ли изменения
	for (unsigned i = 0; i < size_group; i++)
	{
		if ((*this)[i].GetAverangeMark() != 0 && (*this)[i].GetAverangeMark() < low)
		{
			flag = true;
			p--;
			delete ptr_p_stud[i];
			ptr_p_stud[i] = nullptr;
		}
	}
	if (flag)
	{
		Student** temp = new Student*[p];
		for (unsigned i = 0, j = 0; i < size_group; i++)
		{
			if (ptr_p_stud[i])
			{
				temp[j] = ptr_p_stud[i];
				j++;
			}
		}
		delete[]ptr_p_stud;
		ptr_p_stud = temp;
		size_group = p;
	}
	
}
void Group::transfer(unsigned pos, Group& oth, unsigned pos2)
{
	if ((*this).size_group >= pos && oth.size_group >= pos2)
	{
		delete oth.ptr_p_stud[pos2];
		oth.ptr_p_stud[pos2] = new Student(*ptr_p_stud[pos]);
		delete ptr_p_stud[pos];
		ptr_p_stud[pos] = new Student();
	}
}
void main()
{
	/*
	//проверяем студента конструктор по умолчанию
	Student s;
	s.Show();
	//проверяем перегрузку FIO и Student
	Student s1({ "Vasya", "Pupkin", "Olegovch" });
	s1.Show();
	Student s2({ "Vasya", "Pupkin" });
	s2.Show();
	Student s3({ "Vasya" });
	s3.Show();
	Student s4 = s3;
	s4.Show();
	//проверка на самоприсваивание FIO
	FIO f("Vasya", "Petya", "Dima");
	f = f;
	f.Show();
	cout << endl;
	//проверяем перегрузку (FIO&)
	FIO f2;
	f2(f);
	f2.Show();
	cout << endl;
	f.Show();
	//проверяем перегрузку ()
	FIO f3;
	f3("Vasya1");
	f3.Show();
	cout << endl;
	f3("Vasya2", "Vasechkin2");
	f3.Show();
	cout << endl;
	f3("Vasya3", "Vasechkin3", "Vas'ok");
	f3.Show();
	cout << endl;
	//проверяем перегрузку [] FIO
	cout << f3[1];
	cout << endl;
	cout << f3[2];
	cout << endl;
	cout << f3[3];
	cout << endl;
	cout << f3[4];
	cout << endl;
	//проверяем перегрузку = (char*)
	f3 = "Oleg";
	f3.Show();
	cout << endl;
	//проверяем перегрузку инкремента DATE
	DATE d(1, 1, 1990);
	d++;
	d.Show();
	cout << "\n";
	++d;
	d.Show();
	cout << "\n";
	d--;
	d.Show();
	cout << "\n";
	--d;
	d.Show();
	cout << "\n";
	//минус DATE
	d - 10;
	d.Show();
	cout << endl;
	//проверяем класс MARK
	MARK m;
	cout << "\n";
	m.Show();
	cout << endl;
	m[1] = 5;
	cout << "\n";
	m.Show();
	cout << endl;
	m++;
	cout << "\n";
	m.Show();
	cout << endl;
	m[0] = 3;
	m.Show();
	m[2] = 7;
	m.Show();
	cout << m.GetAverange();
	cout << endl;*/
	/*Student s("Vasya");
	s.Show();
	s.GetMark(1).Show();
	cout << endl;
	cout << s.GetMark(1).GetAverange();
	s.GetMark(1)[0] = 8;
	s.GetMark(1).Show();*/
	/*Student s;
	s.SetFIO({ "Vasya", "Vas'ok" });
	s.SetDATE({ 12, 12 });
	s.SetHome("Zaboltnogo");
	s.SetPhone("0634903258");
	cout << endl;
	s.GetMark(2).SetMark(0, 1);
	s.Show();
	cout << "Mark: \n";
	s.GetMark(1).Show();
	cout << endl;
	s.GetMark(2).Show();
	cout << endl;
	s.GetMark(3).Show();
	cout << endl;
	Student s2(s.GetFIO(), s.GetDATE(), "0634903232", "MyHome");
	s2.Show();
	Student s3(s2);
	cout << endl;
	s3.Show();
	cout << endl;
	Student s4;
	s4 = s3;
	s4.Show();
	cout << endl;
	s4("Vasya","Valera","DIMA");
	s4.Show();
	cout << endl;
	s4.GetFIO()("Petya");
	s4.Show();*/
	/*Group vnu1421(10);

	Group vnu1422(10);

	Group perenos = vnu1421 + vnu1422;
	perenos.ShowFIO();
	*/
	//perenos.ShowFIO();
	//vnu1423.ShowFIO();
	//auto x = vnu1422.GetStudent(1);
	//x->Show();*/
	//Student a("Vasiliy");
	//Student b("Mariya");
	//a = b;
	//a.operator=(b);
	/*Group vnu1421(10);
Group vnu1422(5);
Group vnu1423 = vnu1421 + vnu1422;
vnu1423.ShowStudents();
vnu1423.GetStudent(0).SetFIO("Vasya");
vnu1423.ShowStudents();
cout << endl << vnu1423.GetSize() << endl;
vnu1423.GetStudent(14).Show();
++vnu1423;
vnu1423++;
cout << endl << vnu1423.GetSize() << endl;
vnu1423.GetStudent(15).SetFIO({ "Vas", "vasya", "vasyaa" });
vnu1423.GetStudent(15).Show();
vnu1423.GetStudent(16).Show();
vnu1423--;
--vnu1423;
cout << endl << vnu1423.GetSize() << endl;
vnu1423.ShowStudents();
Group vnu1424 = vnu1423;
bool b = (vnu1423 == vnu1421);
cout << endl << "\t\t\t" << b << endl;
b = (vnu1423 == vnu1424);
cout << endl << "\t\t\t" << b << endl;
b = (vnu1421 < vnu1423);
cout << endl << "\t\t\t" << b << endl;
b = (vnu1423 > vnu1424);
cout << endl << "\t\t\t" << b << endl;
b = (vnu1423 >= vnu1424);
cout << endl << "\t\t\t" << b << endl;
Student* st = new Student[20];
Group vnu1425(st, 20);
vnu1425.ShowStudents();*/

Group vpu1421(5);
Group vpu1422(5);

vpu1421.GetStudent(0).SetDATE({ 12, 12, 1989 });
vpu1421.GetStudent(0).SetFIO({ "Alexandr", "Zubenko", "Igorevich" });
vpu1421[0].SetHome("Ac.Zabolotnogo st.");
vpu1421[0].SetPhone("+380634903258");
for (int i = 1; i < 5; i++)
	vpu1421.GetStudent(i) = vpu1421.GetStudent(0);
vpu1421.ShowStudents();
vpu1421.GetStudent(0).GetFIO().SetName("E");
vpu1421.GetStudent(1).GetFIO().SetName("A");
vpu1421.GetStudent(2).GetFIO().SetName("C");
vpu1421.GetStudent(3).GetFIO().SetName("B");
vpu1421.GetStudent(4).GetFIO().SetName("D");
//протестируем сортировку
vpu1421.SortByName();
vpu1421.ShowStudents();
vpu1421.GetStudent(0).GetFIO().SetSurname("aaaa");
vpu1421.GetStudent(1).GetFIO().SetSurname("aaaaa");
vpu1421.GetStudent(2).GetFIO().SetSurname("a");
vpu1421.GetStudent(3).GetFIO().SetSurname("aaa");
vpu1421.GetStudent(4).GetFIO().SetSurname("aa");
vpu1421.SortBySurname();
vpu1421.ShowStudents();
vpu1421.GetStudent(0).GetMark(0).SetMark(0, 10);
vpu1421.GetStudent(1).GetMark(0).SetMark(0, 4);
vpu1421.GetStudent(2).GetMark(0).SetMark(0, 1);
vpu1421.GetStudent(3).GetMark(0).SetMark(0, 3);
vpu1421.GetStudent(4).GetMark(0).SetMark(0, 2);

vpu1421.SortByName();
cout << endl << vpu1421.GetStudent(0).GetMark(0).GetAverange();
cout << endl << vpu1421.GetStudent(1).GetMark(0).GetAverange();
cout << endl << vpu1421.GetStudent(2).GetMark(0).GetAverange();
cout << endl << vpu1421.GetStudent(3).GetMark(0).GetAverange();
cout << endl << vpu1421.GetStudent(4).GetMark(0).GetAverange();
//удаляем всех студентов со средней оценкой меньше аргумента функции Del_if_Low_Mark(float)
vpu1421.Del_if_Low_Mark(2);
cout << endl << "Group Size " << vpu1421.GetSize() << endl;
vpu1421.ShowStudents();
vpu1421.transfer(0, vpu1422, 0);
}
